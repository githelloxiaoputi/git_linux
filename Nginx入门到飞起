1.	官网：http://nginx.org/		nginx帮助文档：http://nginx.org/en/docs/   
2.	下载安装包：wget http://nginx.org/download/nginx-1.14.0.tar.gz
3.	解压并进入目录：tar zxvf nginx-1.14.0.tar.gz		cd nginx-1.14.0
4.	依赖库：nginx依赖prce库（其实就是正则） 安装依赖：yum -y install pcre pcre-devel 	
5.	编译nginx到/usr/local/nginx文件夹中：./configure --prefix=/usr/local/nginx
6.	编译成功之后安装：make && make install
7.	进入nginx目录：cd /usr/local/nginx    底下包含：conf html sbin log ==》 配置文件，网站文件，进程文件，日志文件 
8.	查看PID进程数：ps aux|grep nginx    或者    more log/nginx.pid
9.	修改配置文件并重新启动：kill -HUP PID
10.	重读日志，在日志按月/日分割时有用：kill -USR1 PID
11.	虚拟主机配置：
	server{
		listen 80;						#端口设置
		server_name aa.com;				#域名设置

		location / {
			root /var/www/html;			#项目目录
			index index.html index.php;	#项目索引文件以及顺序
		}

		access_log logs/xiaoputi.log;	#访问域名成功日志文件
	}
12.	location匹配说明	格式：location [=|~|~*|^~] patt {...}
	判断流程：先判断是否有精准匹配，如果有精准匹配则直接选中对应的匹配结果，如果没有精准匹配则找普通匹配，
			如果有多个匹配到了，则找匹配最长的那个并记录下来，最后再找正则匹配，一旦匹配到一个则使用正则
			的匹配结果就跳出
	= 	表示精准匹配
	~ 	表示正则匹配(区分大小写)		
	~*	表示正则匹配(不区分大小写)
	^~	表示模式匹配也是正则	
	不写表示字符串匹配
	location / 表示匹配浏览器域名后面紧跟着的“/”,匹配到了,则应用里面的配置文件
	location / 和 location /foo		匹配 location /foo 匹配越全所以被选择
	location / 和 location ~ image	匹配 location ~ image 正则优先匹配
12.	nginx里面的变量(所有变量文件位于：nginx目录下的conf目录下的fastcgi.conf文件中)：
	$remote_addr 	远程访问的ip
	$http_user_agent	访问头文件
	$document_root	项目目录也就是root后面指定的目录
	$fastcgi_script_name  项目文件
13.	rewrite重写	重写模式可以再server里面写也可以在location里面写
	下列描述中的条件有以下几种写法
		1.	“=”来判断相等，用于字符串比较
		2.	“~“用正则来匹配（此处的正则区分大小写）
			”~*“用正则匹配（此处的正则不区分大小写）
		3.	”-f-d-e“来判断是否为文件，是否为目录，文件是否存在
	if语句格式		if (条件) { 重写模式 }
		1.浏览器输入ip是127.0.0.1的返回403不让访问
			if ($remote_addr = '127.0.0.1') { return 403;}	
		2.只要使用IE浏览器打开任何页面都返回ie.htm，记住使用break，否则页面将进入死循环，也就是不断重写
			if ($http_user_agent ~ MSIE) { rewrite ^.*$ /ie.htm break; }
		3.判断文件是否存在，不存在则重写到404页面
			if (!-e $document_root$fastcgi_script_name) { rewrite ^.*$ /404.html break;}
		4.使用set来设置变量
			set $site = 1;
			if ($site = 1) { rewrite ^.*$ /404.html;}

	1. 在重写规则的时候，如果正则有遇到{}的时候，需要使用""包起来，并且，正则里面括号数量里面的内容可以使用$1,$2,$3....代表 例如：
		location /ecshop {
			rewrite "goods-(\d{1-7})\.html" /ecshop/good.html?id=$1;
		}
14.	提一句：安装mysql		
	yum install -y mysql-devel mysqld	#客户端
	yum install -y mysql-server		#服务端
15.	提一句：删除已经编译过的内容
	进入编译目录	make clean
16.	提一句：Apache编译的php是不能给nginx使用
17.	提一句：安装gd库(要想使用必须把这个库编译进php中去)
	yum -y install gd
18.	提一句：查看某个软件编译时需要的库		
	进入对应编译目录使用：./configure -help|grep 库名	如：./configure -help|grep mysql
19.	提一句：如果提示某某.h文件没有找到，则必须安装该文件的头文件包也就是加上 -devel
	如：yum -y install gd-devel
20.	提一句：nginx php apache工作原理与转发：
	php是Apache的一个模块，而nginx则没有php模块，所以Apache编译的php是不能被nginx所使用的nginx是通过
	和php以get的形式进行传递参数的方式将浏览器的变量参数传递给nginx。php一直是以9000端口独立运行着。当nginx
	遇到浏览器发来的一系列变量的时候（理解成php文件），nginx无法自行操作这些数据，所以nginx要对这些数据做转发
	给php进程来处理。代码实现
	location ~ \.php$ {
		root html;	#告诉php要去找的所在哪个目录下的php文件
		fastcgi_pass 127.0.0.1:9000;		#转发给php，让php来处理这些内容
		fastcgi_index index.php;	#指定默认索引页面
		fastcgi_param SCRIPT_FILEME $document_root$fastcgi_script_name;	#发送给php指定文件的参数
		include fastcgi_params;	#其他固有参数也携带
	}
21.	提一句：编译php一般需要写上这些库：
	./configure --prefix=/usr/local/php --with-mysql-mysqlnd --enable-mysqlnd --with-gd --enable-gb-native-ttf --enable-gd-jis-conv --enable-fpm
	其中--enable-fpm是必须的，才会出现有php运行的一个文件php-fpm这个文件在/usr/local/php/sbin目录下
22.	提一句：php编译完之后需要的操作
	1.把编译成功后的目录里面的php.ini.development拷贝一份到php指定目录下面的lib目录中
		cp /usr/local/src/php-5.4.19/php.ini.development /usr/local/php/lib/php.ini
	2.进入编译后的目录拷贝php产生的一个配置文件成另一个文件名字（都在同级目录）
		cp /usr/local/php/etc/php-fpm.conf-default /usr/local/php/etc/php-fpm.conf
23. 提一句：当我们使用localhost为主机名连接数据库的时候，linux服务器默认会使用mysql的socket来连接数据库，而我们
	使用127.0.0.1或者其他ip来连接数据库的时候默认是走tcp协议来连接数据库，所以，当使用localhost来连接数据库失败
	时候，可以修改php.ini中mysql_default_socket的值为数据库socket的路径，例如：
	mysql_default_socket = /var/lib/mysql.sock
24.	gzip压缩（针对整个网站起效果，就放到server中）
	原理：浏览器开始请求并声明可以接受gzip或deflate或compress或sdch压缩，从http协议的角度看，请求头声明accept-encoding:gzip deflate sdch(是指压缩算法，其中sdch压缩方法是谷歌自由的一种压缩算法),服务器回应把内容用gzip方式进行压缩返还给浏览器，浏览器接收gzip压缩文件并进行解码显示内容
	常用参数：
	1.	gzip on|off;	#是否开启gzip
	2.	gzip_buffers 32 4K|16 8K;	#缓冲（压缩在内存中缓存几块？每块多大?，如：32快 4k或者16块8k）
	3.	gzip_comp_level [1-9];	#推荐6 压缩级别（级别越高，压缩越小，越浪费CPU计算资源）
	4.	gzip_disable	#正则匹配UA 什么的Uri不进行gzip
	5.	gzip_min_lenth 200;	#开始压缩的最小长度（再小就不要压缩了，没有意义）
	6.	gzip_http_version 1.0|1.1	#开始压缩的http协议版本，可以不设置，目前几乎全是1.1协议
	7.	gzip_proxied	#设置请求者代理服务器，该如何缓存内容
	8.	gzip_types text/plain	#application/xml 对哪些类型的文件用压缩 如txt,xml,html,css  格式参考路径/usr/local/nginx/conf/mime.types文件
	9.	gzip_vary on|off	#是否传输gzip压缩标志
	例如：
	gzip on;
	gzip_buffers 32 4K;
	gzip_comp_level 6;
	gzip_min_lenth 4000;
	gzip_types text/css application/x-javascript;
	注意：图片/mp3这样的二进制文件，不变压缩，因为压缩比较小，比如100->80字节，而且压缩也是耗费CPU资源的
25.	expires缓存提升网站负载
	expires写法比较简单，可在location或if中写
	格式：缓存时间是根据服务器时间来做参考的，另：服务器304也是一种很好的缓存手段。
	expires 5s #5秒过期
	expires 5m #5分钟过期
	expires 5h #5小时过期
	expires 5d #5天过期
26.	nginx和Apache之间的反向代理(俗称动静分离)
	说明：nginx更适合处理html文件，而Apache更适合处理php文件，当浏览器发来文件请求的时候，服务端自动判断是php文件还是html文件，如果是php文件，nginx收到后
		 进行一个转发，转发到Apache，然后让Apache来处理这个文件，并最后转发给浏览器，这个过程就是一个反向代理proxy_pass
	用法：把Apache中的默认端口改为8080，并配置好虚拟主机，在nginx中写好：
		 location ~ \.php$ {
		 	proxy_pass http://ip:8080即可	ip使用127.0.0.1可能也行
		 }
27. nginx实现负载均衡，减少服务器负载
	1.设置多个后台端口虚拟主机：以图片用其他主机处理为例子，正常访问网站端口为80，后台图片处理虚拟主机分别为81，82
		负载均衡设置（imgserver为组名字，后面proxy_pass里需要用到）:
		upstream imgserver {
			#weight表示权重	max_fails表示超时请求次数	fail_timeout表示超时请求时间
			server ip:81 weight=1 max_fails=2 fail_timeout=3;
			server ip:82 weight=1 max_fails=2 fail_timeout=3;
		}
		80端口虚拟主机设置，server下：
		location ~* \.(jpg|png|jpeg)$ {
			proxy_set_header X-Forwarded-For $remote_addr;	#把客户端的ip带到图片端虚拟主机中，这样在图片日志中可以显示客户端ip而不是服务端ip
			proxy_pass http://imgserver;	#遇到图片的情况下将图片发向81或82端口虚拟主机处理
		}
		#81端口
		server {
			listen 81;
			server_name localhost;
			root html;
			access_log logs/81-access.log main;		#更新后的日志格式有些不需要再写main了
		}
		#82端口
		server {
			listen 82;
			server_name localhost;
			root html;
			access_log logs/82-access.log main;		#更新后的日志格式有些不需要再写main了
		}
28.	提一句：为php编译一个新扩展
	1.进入php目录下的bin目录中并执行phpize文件
	2.在下载下来的扩展进行解压并进入执行./configure --with-php-config=php目录中的bin/php-config
	3.执行make && make install	会获得一个扩展路径
	4.在php.ini中添加上这个.so扩展	extension = 扩展路径
	5.重启php就可以了
29.	nginx实现memcache的缓存机制
	1.下载memcache的包扩展并编译进php中使php支持memcache的使用
	2.在nginx下进行配置：
	  location / {
	  	set $memcached_key = "$uri";	#设置memcached的一个变量
	  	memcached_pass 127.0.0.1:11211;	#将内容转发到memcached中去访问，如果存在返回信息，不存在请求数据库并获得信息存进memcached中的变量$uri中
	  }
30.	nginx实现多台服务器调用memcache的缓存机制
	1.下载安装一个nginx的哈希算法模块	NginxHttpUpstreamConsistentHash		这个算法会自动计算缓存存的到指定服务器和读取指定服务器
	2.使用upstream定义三台处理memcache的服务器
		upstream mcserver {
			consitent_hash $request_uri;
			server ip:11211;
			server ip:11212;
			server ip:11213;
		}
	3.location下设置代理
		location \ {
			set $memcached_key $request_uri;
			memcached_pass mcserver;
			error_page 404 /callback.php
		}
	4.在请求的callback.php中连接3台服务器，并设置url值和$request_uri值一致的变量，进行memcache的存取操作就可以了	
31.	nginx编译新模块：
	1.nginx -V查看原来编译的模块
	2.下载需要的模块并解压，获取该模块的文件路径
	3.进入nginx编译目录，使用./configure --prefix=nginx目录 --add-module=新模块路径 
	4.make && make install
32.	Apache下自带压力测试工具bin目录下ab工具
	如：2000次并发  8000次请求
	./ab -c 2000 -n 80000 域名/index.html
33.	编译安装nginx的统计模块便于观察nginx的状态
	模块名称：--with-http_stub_status_module
	nginx下的配置：
	location /status {
		stub_status on;	开启统计状态
		access_log off;	关闭产生日志
		allow 自己的ip;	允许自己的ip查看
		deny all;	其他人拒绝查看这个状态
	}
	浏览器访问：域名/ip/status


























