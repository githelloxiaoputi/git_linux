1. 变量
 	$0 表示整个当前行  
 	$1 表示第一个字段
 	$2 表示第二个字段
 	...

 	NR  每行的记录号
 	NF  每行拥有几个变量
 	FILENAME  正在处理的文件名

 2. 分隔符 -F
 	例如：打印某一变量根据分隔符才会有变量的产生  
 			awk -F ':' '{print $3}' /etc/passwd
 	例如：打印某俩变量，可以根据','连接，打印处来的结果会逗号会变成空格形式
 			awk -F ':' '{print $1,$3}' /etc/passwd
 	例如：打印某两个变量，并拼接字符串用 双引号 拼接
 			awk -F ':' '{print "用户名:"$1,"uid:"$3}' /etc/passwd

 3. 使用printf打印内容：
 		awk -F ':' '{printf("Line:%3s Col:%s User:%s\n",NR,NF,$1)}' /etc/passwd

 4. 打印/etc/passwd中用户ID大于100的行号和用户名（if...else...）
 		awk -F ':' '{if ($3>100) print "Line: "NR,"User:"$1;else print $2}' /etc/passwd
 		awk -F ':' '$3>100{print "Line: "NR,"User:"$1;else print $2}' /etc/passwd

 5. 使用awk实现与sed同样的功能
 	sed -n '/Error/p' | awk '{print $1}' 文件名称
 	awk '/Error/{print $1}' 文件名称	

 6. ~符号和!~匹配正则表达式
 	匹配/etc/passwd中以:分割，把用户名开头是m的用户打印出来
 	awk -F ':' '$1~/^m.*/{print $1}' /etc/passwd
 	不匹配的用户打印
 	awk -F ':' '$1!~/^m.*/{print $1}' /etc/passwd

 7. awk的扩展写法
 	awk -F ':' 'BEGIN{print "Line   Col   User"}{print NR,NF,$1}END{print"----"FILENAME"----"}' /etc/passwd
 	显示格式：
 	Line Col User
 	26	 7	 syslog
 	......
 	----/etc/passwd----

 8. 例子：获取某文件下的文件大小
 	ls -l | awk 'BEGINT{size=0}{size+=$5}END{print size/1024/1024"M"}'

 9. 例子：计算/etc/passwd中的用户个数 排除用户为空的时候
 	awk -F ':' 'BEGIN{count=0}$1!~/^$/{count ++}END{print count}' /etc/passwd

 10. 例子：统计显示/etc/passwd中UID大于100的用户名排序和名称
 	awk -F ':' 'BEGIN{count=0}{if($3>100) name[count++]=$1}END{for (i=0;i<count;i++) print i,name[i]}' /etc/passwd
 	显示格式：
 	序号 姓名
 	...

 11. 获取netstat -anp下CONNECTED和LISTENING的个数
 	netstat -anp | awk '$6~/^[C|L]/{sum[$6]++}END{for (i in sum) print i,sum[i]}'
 	显示格式
 	LISTEN 7
	CONNECTED 34





























